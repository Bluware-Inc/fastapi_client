# flake8: noqa E501
import json
from typing import Any, Awaitable, Dict, IO, List, Optional, TYPE_CHECKING
from datetime import date, datetime, timedelta
from uuid import UUID
import pydantic
import typer
import yaml

app = typer.Typer()

bad = typer.style("bad", fg=typer.colors.WHITE, bg=typer.colors.RED)

from @CLIENT_IMPORT_NAME@ import models as m

from @CLIENT_IMPORT_NAME@.api_client import ApiClient


{{#operations}}

{{#operation}}
@app.command()
def {{operationId}}(client: ApiClient, {{#allParams}}{{#required}}{{paramName}}: {{>_dataTypeApi}}{{/required}}{{^required}}{{paramName}}: Optional[{{>_dataTypeApi}}] = None{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> {{>_returnType}}:
{{#notes}}
    """
    {{{notes}}}
    """
{{/notes}}
    try:
        result = client.{{classVarName}}.{{operationId}}({{#allParams}}{{paramName}}={{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
    except Exception as e:
        typer.echo(str(e) + bad)
        typer.exit()

    if isinstance(result, pydantic.BaseModel):
        typer.echo(yaml.dump(result.dict()))
    else:
        typer.echo(yaml.dump(result))

    return result
{{/operation}}
{{/operations}}
    